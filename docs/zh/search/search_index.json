{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"pynlfff"},{"location":"changelog/","text":"2022\u5e743\u6708\uff0c\u7b2c\u4e00\u8ba1\u7b97\u6279\u6b21\u53d1\u5e03\u3002(2010.5-2019.1-96min)","title":"\u65e5\u5fd7"},{"location":"construction/","text":"\u6574\u4e2a\u6570\u636e\u96c6\u5efa\u9020\u8fc7\u7a0b\u5206\u4e3a\uff1a\u6570\u636e\u96c6\u7b5b\u9009\u3001\u539f\u59cb\u6570\u636e\u4e0b\u8f7d\u3001\u8fb9\u754c\u6761\u4ef6\u51c6\u5907\u3001\u6279\u91cf\u8ba1\u7b97\u3001\u4f7f\u7528\u8000\u6591\u4fe1\u606f\u6253\u6807\u7b7e\u3001\u6570\u636e\u5f52\u6863\u548c\u53d1\u5e03\uff1b\u53ef\u4ee5\u4ece \u8fd9\u7bc7\u6587\u7ae0 \u4e86\u89e3\u66f4\u591a\u7ec6\u8282\u3002","title":"\u5efa\u9020"},{"location":"contact/","text":"\u8054\u7cfb\u4e0e\u6570\u636e\u7533\u8bf7 \u00b6 \u5bf9\u4e8e\u5c11\u91cf\u6570\u636e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728 \u5728\u7ebf\u641c\u7d22\u53ca\u4e0b\u8f7d \u8fdb\u884c\u641c\u7d22\u548c\u4e0b\u8f7d\uff0c\u53ef\u4ee5\u4ece \u6570\u636e\u96c6\u6458\u8981\u4fe1\u606f \u4e0b\u8f7d\u5230\u6458\u8981\u4fe1\u606f\u3002 \u5bf9\u4e8e\u8d85\u8fc7100GB\u7684\u6570\u636e\uff08100GB-200TB\uff09\uff0c\u6211\u4eec\u63a8\u8350\u5148\u901a\u8fc7\u4e0b\u9762\u90ae\u4ef6\u8054\u7cfb\u6211\u4eec\uff0c\u518d\u8ba8\u8bba\u901a\u8fc7\u90ae\u5bc4\u786c\u76d8\u7b49\u65b9\u5f0f\u4f20\u8f93\u3002 \u5f90\u9f99 ( lxu@nao.cas.cn ) \u9ec4\u946b ( huangxin@nssc.ac.cn )","title":"\u8054\u7cfb"},{"location":"contact/#_1","text":"\u5bf9\u4e8e\u5c11\u91cf\u6570\u636e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728 \u5728\u7ebf\u641c\u7d22\u53ca\u4e0b\u8f7d \u8fdb\u884c\u641c\u7d22\u548c\u4e0b\u8f7d\uff0c\u53ef\u4ee5\u4ece \u6570\u636e\u96c6\u6458\u8981\u4fe1\u606f \u4e0b\u8f7d\u5230\u6458\u8981\u4fe1\u606f\u3002 \u5bf9\u4e8e\u8d85\u8fc7100GB\u7684\u6570\u636e\uff08100GB-200TB\uff09\uff0c\u6211\u4eec\u63a8\u8350\u5148\u901a\u8fc7\u4e0b\u9762\u90ae\u4ef6\u8054\u7cfb\u6211\u4eec\uff0c\u518d\u8ba8\u8bba\u901a\u8fc7\u90ae\u5bc4\u786c\u76d8\u7b49\u65b9\u5f0f\u4f20\u8f93\u3002 \u5f90\u9f99 ( lxu@nao.cas.cn ) \u9ec4\u946b ( huangxin@nssc.ac.cn )","title":"\u8054\u7cfb\u4e0e\u6570\u636e\u7533\u8bf7"},{"location":"download/","text":"\u603b\u4f53\u4e0a \u00b6 \u6570\u636e\u96c6\u6458\u8981\u4fe1\u606f \u5728\u7ebf\u641c\u7d22\u53ca\u4e0b\u8f7d \u539f\u59cb\u6570\u636e \u00b6 \u6211\u4eec\u4f7f\u7528 drms \u4ece JSOC \u4e0b\u8f7d sharp cea \u6587\u4ef6 (\u5305\u62ecBp.fits, Bt.fits, Br.fits) \u4f5c\u4e3a\u539f\u59cb\u6587\u4ef6 raw-202203 , \u53ef\u4ee5\u4ece \u8fd9\u7bc7\u6587\u7ae0 \u627e\u5230\u8be6\u7ec6\u7684\u7b5b\u9009\u89c4\u5219\u3002 NLFFF\u6587\u4ef6 \u00b6 \u4ea7\u54c1\u6587\u4ef6\u5b58\u50a8\u5728\u8fd9\u4e2a\u6587\u4ef6\u5939 archive-202203 , \u6837\u672c\u5b58\u50a8\u8def\u5f84\u53ef\u4ee5\u4ece\u6570\u636e\u5e93\u91cc\u9762\u83b7\u5f97\uff0c\u6bcf\u4e2a\u6837\u672c\u901a\u5e38\u5305\u62ec\u4e0b\u8868\u8fd9\u4e9b\u6587\u4ef6\u3002 \u4f60\u4e5f\u53ef\u4ee5 \u5728\u8fd9\u91cc\u5728\u7ebf\u641c\u7d22\u4e0b\u8f7d . \u5c11\u91cf\u6570\u636e(<100GB) \u53ef\u4ee5\u76f4\u63a5\u4ece\u7f51\u7edc\u4e0b\u8f7d, \u5bf9\u4e8e\u5927\u91cf\u6570\u636e(100GB-200TB) \u6211\u4eec\u63a8\u8350\u5148\u8054\u7cfb\u6211\u4eec\uff0c\u7136\u540e\u901a\u8fc7\u90ae\u5bc4\u786c\u76d8\u7b49\u65b9\u5f0f\u4f20\u9012\u6570\u636e\u3002 Generation stage File name Description prepare grid1.ini,grid2.ini,grid3.ini Information about the grid used for the corresponding level mask1.dat,mask2.dat,mask3.dat The mask data used for the corresponding level allboundaries1.dat, allboundaries2.dat, allboundaries3.dat The boundaries data used for the corresponding level boundary.ini Boundary and algorithm information process Bout.bin Nonlinear force-free field B0.bin Potential field, due to storage problems, this part of the data is partially saved NLFFFquality1.log, NLFFFquality2.log, NLFFFquality3.log Corresponding grade of product quality prot1.log, prot2.log, prot3.log Corresponding level iteration log information step1.log, step2.log, step3.log Information on the number of iterative steps for the corresponding level Energy.log Run Energy Log, If you only run to grid1, this part may not have archive run.log Run Print Detail Log \u6807\u7b7e\u6570\u636e \u00b6 \u53ef\u4ee5\u4ece \u8fd9\u4e2a\u94fe\u63a5 \u4e0b\u8f7d\u5230\u4e0b\u8868\u7684\u8000\u6591\u6807\u7b7e\u53ca\u4e2d\u95f4\u6587\u4ef6\u3002 Generation stage File name Description raw_file flare_raw The folder containing the original flare information for download raw_file all_harps_with_noaa_ars.txt Mapping update for HARP number and NOAA number prepare knoaa_vflaretimelist.pickle The dictionary with key NOAA number,value flare time list is saved as python pickle prepare ksharp_vnoaa.pickle Key is HARP number,value is NOAA number list of dictionaries saved as python pickle process label.csv Sample Label Information \u6570\u636e\u5e93\u5f52\u6863 \u00b6 \u53ef\u4ee5\u4ece sqlite-202203/a202203-nlfff.db \u4e0b\u8f7d\u5230\u6570\u636e\u5e93\u6458\u8981\u53ca\u6570\u636e\u5e93\u6807\u7b7e\u7684\u4fe1\u606f\u3002 \u6570\u636e\u5e93\u5305\u62ec\u4e0b\u9762\u5185\u5bb9: Col Name Type Description harpnum_trec timestamp HARP number and time from raw fits name sync with raw fits sync raw find from http://jsoc.stanford.edu/ajax/lookdata.html?ds=hmi.sharp_cea_720s grid_x int4 we finally can calculate the nx,ny,nz corresponding to the level, that is, the nx,ny,nz corresponding to the saved Bout.bin file grid_y int4 grid_z int4 bout_maxlevel int4 The final calculated level,The level of the last saved bout bout_quality_value float8 Set to True if quality is less than 30, else False. bout_quality bool The final calculated quality,The quality of the last saved bout bout_path text The path where Bout is saved, and other files in the same subdirectory as Bout bout_md5 varchar(32) The md5 of Bout bout_size int8 The size of Bout batch int8 Calculated batches, other calculated batches may be available in the future now_flare_level int4 Current Flare Level now_flare_id int4 Current Flare id h6_flare_level, h12_flare_level, h24_flare_level, h48_flare_level int4 Maximum flare levels in 6, 12, 24 and 48 hours, respectively h6_flare_id, h12_flare_id, h24_flare_id, h48_flare_id int4 The ids corresponding to the maximum flare levels in 6,12,24,48 hours, respectively h24_posmx int8 0 - No MX or CMX level flares in hour24 or 48;1 - MX or CMX level flares within hour24 or 48;2 - MX or CMX Flares occur within hour24 or 48 and the sample does not have a MX or CMX level flare at that moment h24_poscmx int8 h48_posmx int8 h48_poscmx int8 h24_delta05 int8 Maximum change in grade in 24 hours h48_delta05 int8 Maximum change in grade in 48 hours \u6807\u7b7e\u6570\u636e\u5305\u62ec\u4e0b\u8868\u5185\u5bb9: Col Name Type Description deeps_flare_id int4 The id that uniquely identifies the flare information in the deepsolar database system start_datetime timestamp Flare start time peak_datetime timestamp Flare end time end_datetime timestamp Flare peaking time xray_class varchar(1) Flare level class xray_intensity int4 Intensity of raw data multiplied by 10 latitude int4 latitude longtitude int4 longtitude noaa_ar int4 Corresponding NOAA active region number source varchar(16) Data source","title":"\u4e0b\u8f7d"},{"location":"download/#_1","text":"\u6570\u636e\u96c6\u6458\u8981\u4fe1\u606f \u5728\u7ebf\u641c\u7d22\u53ca\u4e0b\u8f7d","title":"\u603b\u4f53\u4e0a"},{"location":"download/#_2","text":"\u6211\u4eec\u4f7f\u7528 drms \u4ece JSOC \u4e0b\u8f7d sharp cea \u6587\u4ef6 (\u5305\u62ecBp.fits, Bt.fits, Br.fits) \u4f5c\u4e3a\u539f\u59cb\u6587\u4ef6 raw-202203 , \u53ef\u4ee5\u4ece \u8fd9\u7bc7\u6587\u7ae0 \u627e\u5230\u8be6\u7ec6\u7684\u7b5b\u9009\u89c4\u5219\u3002","title":"\u539f\u59cb\u6570\u636e"},{"location":"download/#nlfff","text":"\u4ea7\u54c1\u6587\u4ef6\u5b58\u50a8\u5728\u8fd9\u4e2a\u6587\u4ef6\u5939 archive-202203 , \u6837\u672c\u5b58\u50a8\u8def\u5f84\u53ef\u4ee5\u4ece\u6570\u636e\u5e93\u91cc\u9762\u83b7\u5f97\uff0c\u6bcf\u4e2a\u6837\u672c\u901a\u5e38\u5305\u62ec\u4e0b\u8868\u8fd9\u4e9b\u6587\u4ef6\u3002 \u4f60\u4e5f\u53ef\u4ee5 \u5728\u8fd9\u91cc\u5728\u7ebf\u641c\u7d22\u4e0b\u8f7d . \u5c11\u91cf\u6570\u636e(<100GB) \u53ef\u4ee5\u76f4\u63a5\u4ece\u7f51\u7edc\u4e0b\u8f7d, \u5bf9\u4e8e\u5927\u91cf\u6570\u636e(100GB-200TB) \u6211\u4eec\u63a8\u8350\u5148\u8054\u7cfb\u6211\u4eec\uff0c\u7136\u540e\u901a\u8fc7\u90ae\u5bc4\u786c\u76d8\u7b49\u65b9\u5f0f\u4f20\u9012\u6570\u636e\u3002 Generation stage File name Description prepare grid1.ini,grid2.ini,grid3.ini Information about the grid used for the corresponding level mask1.dat,mask2.dat,mask3.dat The mask data used for the corresponding level allboundaries1.dat, allboundaries2.dat, allboundaries3.dat The boundaries data used for the corresponding level boundary.ini Boundary and algorithm information process Bout.bin Nonlinear force-free field B0.bin Potential field, due to storage problems, this part of the data is partially saved NLFFFquality1.log, NLFFFquality2.log, NLFFFquality3.log Corresponding grade of product quality prot1.log, prot2.log, prot3.log Corresponding level iteration log information step1.log, step2.log, step3.log Information on the number of iterative steps for the corresponding level Energy.log Run Energy Log, If you only run to grid1, this part may not have archive run.log Run Print Detail Log","title":"NLFFF\u6587\u4ef6"},{"location":"download/#_3","text":"\u53ef\u4ee5\u4ece \u8fd9\u4e2a\u94fe\u63a5 \u4e0b\u8f7d\u5230\u4e0b\u8868\u7684\u8000\u6591\u6807\u7b7e\u53ca\u4e2d\u95f4\u6587\u4ef6\u3002 Generation stage File name Description raw_file flare_raw The folder containing the original flare information for download raw_file all_harps_with_noaa_ars.txt Mapping update for HARP number and NOAA number prepare knoaa_vflaretimelist.pickle The dictionary with key NOAA number,value flare time list is saved as python pickle prepare ksharp_vnoaa.pickle Key is HARP number,value is NOAA number list of dictionaries saved as python pickle process label.csv Sample Label Information","title":"\u6807\u7b7e\u6570\u636e"},{"location":"download/#_4","text":"\u53ef\u4ee5\u4ece sqlite-202203/a202203-nlfff.db \u4e0b\u8f7d\u5230\u6570\u636e\u5e93\u6458\u8981\u53ca\u6570\u636e\u5e93\u6807\u7b7e\u7684\u4fe1\u606f\u3002 \u6570\u636e\u5e93\u5305\u62ec\u4e0b\u9762\u5185\u5bb9: Col Name Type Description harpnum_trec timestamp HARP number and time from raw fits name sync with raw fits sync raw find from http://jsoc.stanford.edu/ajax/lookdata.html?ds=hmi.sharp_cea_720s grid_x int4 we finally can calculate the nx,ny,nz corresponding to the level, that is, the nx,ny,nz corresponding to the saved Bout.bin file grid_y int4 grid_z int4 bout_maxlevel int4 The final calculated level,The level of the last saved bout bout_quality_value float8 Set to True if quality is less than 30, else False. bout_quality bool The final calculated quality,The quality of the last saved bout bout_path text The path where Bout is saved, and other files in the same subdirectory as Bout bout_md5 varchar(32) The md5 of Bout bout_size int8 The size of Bout batch int8 Calculated batches, other calculated batches may be available in the future now_flare_level int4 Current Flare Level now_flare_id int4 Current Flare id h6_flare_level, h12_flare_level, h24_flare_level, h48_flare_level int4 Maximum flare levels in 6, 12, 24 and 48 hours, respectively h6_flare_id, h12_flare_id, h24_flare_id, h48_flare_id int4 The ids corresponding to the maximum flare levels in 6,12,24,48 hours, respectively h24_posmx int8 0 - No MX or CMX level flares in hour24 or 48;1 - MX or CMX level flares within hour24 or 48;2 - MX or CMX Flares occur within hour24 or 48 and the sample does not have a MX or CMX level flare at that moment h24_poscmx int8 h48_posmx int8 h48_poscmx int8 h24_delta05 int8 Maximum change in grade in 24 hours h48_delta05 int8 Maximum change in grade in 48 hours \u6807\u7b7e\u6570\u636e\u5305\u62ec\u4e0b\u8868\u5185\u5bb9: Col Name Type Description deeps_flare_id int4 The id that uniquely identifies the flare information in the deepsolar database system start_datetime timestamp Flare start time peak_datetime timestamp Flare end time end_datetime timestamp Flare peaking time xray_class varchar(1) Flare level class xray_intensity int4 Intensity of raw data multiplied by 10 latitude int4 latitude longtitude int4 longtitude noaa_ar int4 Corresponding NOAA active region number source varchar(16) Data source","title":"\u6570\u636e\u5e93\u5f52\u6863"},{"location":"home/","text":"\u57fa\u4e8e\u592a\u9633\u52a8\u529b\u5b66\u89c2\u6d4b\u53f0(SDO)\u4e0a\u7684\u65e5\u9707\u548c\u78c1\u6210\u50cf\u4eea( HMI )\u89c2\u6d4b\u5230\u7684\u77e2\u91cf\u78c1\u573a\u6570\u636e\uff0c\u6211\u4eec\u5229\u7528\u975e\u7ebf\u6027\u65e0\u529b\u65e5\u5195\u78c1\u573a( NLFFF )\u5916\u63a8\u6cd5\u5efa\u7acb\u4e86\u4e00\u4e2a\u4e09\u7ef4\u592a\u9633\u6d3b\u52a8\u533a\u78c1\u573a\u6570\u636e\u96c6\u3002 \u76ee\u524d\u7684\u603b\u91cf\u8d85\u8fc7200TB\uff0c73,000\u5f20\u4e09\u7ef4\u78c1\u56fe\uff0c\u65f6\u95f4\u5206\u8fa8\u7387\u4e3a96\u5206\u949f\uff0c\u7a7a\u95f4\u5206\u8fa8\u7387\u4e0e\u539f\u59cb\u7684 sharp cea magnetograms \u4e00\u81f4\u3002","title":"\u9996\u9875"},{"location":"product/","text":"\u4e3b\u8981\u4ea7\u54c1\u6587\u4ef6\u4e3aBout.bin\u6587\u4ef6\uff0c\u5b58\u50a8nlfff\u78c1\u573a\u6570\u636e\uff0c\u5b58\u50a8\u683c\u5f0f\u4e3a\u6309\u884c\u4f18\u5148\u7ea7\u7684\u56db\u7ef4\u6570\u7ec4\uff08c\u98ce\u683c\uff09\uff0c\u6570\u7ec4\u7684\u7b2c0\u7ef4\u4e3a\u5206\u91cf\u6807\u5fd7\uff0c123\u7ef4\u5206\u522b\u8868\u793aBx\u3001By\u3001Bz\u7684xyz\u5750\u6807\u503c\uff0cxyz\u53d6\u503c\u8303\u56f4\u4e0e\u4e0a\u4e00\u5c42\u7f51\u683c\u4e00\u81f4\uff0c\u5b58\u50a8\u6570\u636e\u5355\u4f4d\u4e3a\u9ad8\u65af\uff0c\u4f60\u53ef\u4ee5\u4ece \u672c\u6587 \u83b7\u5f97\u7684\u66f4\u591a\u7ec6\u8282\uff0c\u5982\u679c\u4f60\u4f7f\u7528python\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528pynlfff\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u5176\u4ed6\u8bed\u8a00\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003python\u7684\u5b9e\u73b0\u3002","title":"\u4ea7\u54c1"},{"location":"reference/","text":"This Dataset and Articles \u00b6 TODO Algorithms used \u00b6 \u6211\u4eec\u4f7f\u7528Wiegelmann\u7684\u975e\u7ebf\u6027\u65e0\u529b\u51a0\u72b6\u78c1\u573a NLFFF \u5916\u63a8\u7b97\u6cd5\u8fdb\u884c\u5916\u63a8\u3002 @article { Wiegelmann2012Nov, author = { Wiegelmann, T. and Thalmann, J. K. and Inhester, B. and Tadesse, T. and Sun, X. and Hoeksema, J. T. } , title = {{ How Should One Optimize Nonlinear Force-Free Coronal Magnetic Field Extrapolations from SDO/HMI Vector Magnetograms? }} , journal = { Sol. Phys. } , volume = { 281 } , number = { 1 } , pages = { 37--51 } , year = { 2012 } , month = nov, issn = { 1573-093X } , publisher = { Springer Netherlands } , doi = { 10.1007/s11207-012-9966-z } }","title":"\u53c2\u8003"},{"location":"reference/#this-dataset-and-articles","text":"TODO","title":"This Dataset and Articles"},{"location":"reference/#algorithms-used","text":"\u6211\u4eec\u4f7f\u7528Wiegelmann\u7684\u975e\u7ebf\u6027\u65e0\u529b\u51a0\u72b6\u78c1\u573a NLFFF \u5916\u63a8\u7b97\u6cd5\u8fdb\u884c\u5916\u63a8\u3002 @article { Wiegelmann2012Nov, author = { Wiegelmann, T. and Thalmann, J. K. and Inhester, B. and Tadesse, T. and Sun, X. and Hoeksema, J. T. } , title = {{ How Should One Optimize Nonlinear Force-Free Coronal Magnetic Field Extrapolations from SDO/HMI Vector Magnetograms? }} , journal = { Sol. Phys. } , volume = { 281 } , number = { 1 } , pages = { 37--51 } , year = { 2012 } , month = nov, issn = { 1573-093X } , publisher = { Springer Netherlands } , doi = { 10.1007/s11207-012-9966-z } }","title":"Algorithms used"},{"location":"toolkit/","text":"\u4ea7\u54c1\u4f7f\u7528 \u00b6 NlfffFile\u6587\u4ef6\u8bfb\u5199 \u00b6 \u521b\u5efa\u5bf9\u8c61 \u00b6 from pynlfff.pyproduct import file r = file . NlfffFile () \u8bfb\u53d6\u6570\u636e \u00b6 \u4ecegrid\u8bfb\u53d6size \u00b6 r = file . NlfffFile () grid_path = r \"\\product0\\grid3.ini\" s = r . get_size_from_grid ( grid_path ) print ( s ) [96, 228, 124] \u8bfb\u53d6Bout\u6570\u636e \u00b6 \u65b9\u6cd5\u4e00\uff1a\u7ed9\u5b9a Bout.bin \u548c\u5bf9\u5e94\u7684 grid.ini \u6587\u4ef6 r = file . NlfffFile () bout_bin_path = r \"\\product0\\Bout.bin\" grid_path = r \"\\product0\\grid3.ini\" s = r . read_bin ( bout_bin_path , grid_path = grid_path ) print ( s . shape ) print ( s ) (3, 96, 228, 124) [[[[ -4.85755745 -3.69001267 -4.07361282 ... -0.26802718 -0.26802718 -0.26802718] [ -2.37227954 -3.32715352 -4.60636354 ... -0.26799428 -0.26799428 -0.26799428] [ 3.09420419 -2.96429436 -5.13911427 ... -0.26796139 -0.26796139 -0.26796139] ... ... [ 7.94384187 6.06213112 4.73552989 ... -0.45711367 -0.45711367 -0.45711367] [ 2.05455194 4.55914711 4.73552989 ... -0.45711367 -0.45711367 -0.45711367] [ 7.05974157 4.55914711 4.73552989 ... -0.45711367 -0.45711367 -0.45711367]]]] \u65b9\u6cd5\u4e8c\uff1a\u7ed9\u5b9a Bout.bin \u548c\u5bf9\u5e94\u7684 nx \u3001 ny \u3001 nz \u503c r = file . NlfffFile () bout_bin_path = r \"\\product0\\Bout.bin\" nx = 96 ny = 228 nz = 124 s = r . read_bin ( bout_bin_path , nx = nx , ny = ny , nz = nz ) print ( s . shape ) print ( s ) \u5199\u6570\u636e \u00b6 \u8f6c\u6362\u6587\u4ef6\u683c\u5f0f\u4e3ahdf5 \u00b6 \u65b9\u6cd5\u4e00\uff1a\u7ed9\u5b9a Bout.bin \u548c\u5bf9\u5e94\u7684 grid.ini \u6587\u4ef6\uff0c\u4ee5\u53ca hdf \u6587\u4ef6\u4fdd\u5b58\u8def\u5f84 r = file . NlfffFile () bout_bin_path = r \"\\product0\\Bout.bin\" grid_path = r \"\\product0\\grid3.ini\" h5_path = r \"\\product0\\Bxyz.h5\" r . tran_bin2hdf5 ( bout_bin_path , h5_path , grid_path = grid_path , overwrite = True ) \u65b9\u6cd5\u4e8c\uff1a\u7ed9\u5b9a Bout.bin \u548c\u5bf9\u5e94\u7684 nx \u3001 ny \u3001 nz \u503c\uff0c\u4ee5\u53ca hdf \u6587\u4ef6\u4fdd\u5b58\u8def\u5f84 r = file . NlfffFile () bout_bin_path = r \"\\product0\\Bout.bin\" h5_path = r \"\\product0\\Bxyz.h5\" nx = 96 ny = 228 nz = 124 r . tran_bin2hdf5 ( bout_bin_path , h5_path , nx = nx , ny = ny , nz = nz , overwrite = True ) \u5199\u6570\u7ec4\u6570\u636e \u00b6 r = file . NlfffFile () array_data = np . random . uniform ( - 5 , 5 , size = ( 3 , 100 , 50 , 40 )) h5_path = r \"\\product0\\Bxyz.h5\" r . write_hdf5 ( array_data , h5_path , overwrite = True ) \u4e09\u7ef4\u56fe\u50cf \u00b6 \u5206\u91cf\u5207\u9762\u56feNlfffPlotD3CutCake \u00b6 \u4f7f\u7528\u6d41\u7a0b \u00b6 \u521b\u5efa\u7ed8\u56fe\u5bf9\u8c61\uff0c\u8bbe\u7f6e\u7ed8\u56fe\u5c5e\u6027\uff08\u53ef\u9009\uff09\uff0c\u52a0\u8f7d\u6570\u636e\uff0c\u6dfb\u52a0\u5207\u9762\uff0c\u6267\u884c\u7ed8\u5236\uff0c\u4fdd\u5b58\u6216\u5c55\u793a\u56fe\u7247\uff0c\u82e5\u52a0\u8f7d\u7684\u662fhdf\u6570\u636e\u6587\u4ef6\u8fd8\u9700\u8981\u5173\u95ed\u6587\u4ef6\u3002 \u521b\u5efa\u7ed8\u56fe\u5bf9\u8c61 \u00b6 from pynlfff.pyplot import plot3d d3_drawer = plot3d . NlfffPlotD3CutCake () \u5176\u4e2d\u53ef\u4ee5\u521b\u5efa\u65f6\u4f20\u5165 matplotlib.pyplot.figure \u7684\u8bbe\u7f6e\u53c2\u6570\uff0c\u5982 from pynlfff.pyplot import plot3d d3_drawer = plot3d . NlfffPlotD3CutCake ( figsize = ( 6 , 6 )) \u6216\u8005\u5b57\u5178\u5f62\u5f0f\u4f20\u5165\u53c2\u6570 di_config = { \"figsize\" : ( 6 , 6 ) } d3_drawer = NlfffPlotD3CutCake ( ** di_config ) \u8bbe\u7f6e\u7ed8\u56fe\u5bf9\u8c61\u5c5e\u6027\uff08\u53ef\u9009\uff09 \u00b6 \u8bbe\u7f6e\u8c03\u8272\u76d8 \u00b6 \u8272\u8c03\u8303\u56f4 \u00b6 \u624b\u52a8\u8bbe\u7f6e\u8272\u8c03\u8303\u56f4 \u00b6 d3_drawer . colormap_set_max = 40 # \u8bbe\u7f6e\u6700\u5927\u663e\u793a\u503c d3_drawer . colormap_set_max =- 30 # \u8bbe\u7f6e\u6700\u5c0f\u663e\u793a\u503c \u81ea\u52a8\u8bbe\u7f6e\u8272\u8c03\u8303\u56f4 \u00b6 d3_drawer . colormap_auto_value = True # \u81ea\u52a8\u6c42\u7684\u7ed8\u56fe\u5207\u9762\u4e2d\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c d3_drawer . colormap_auto_zip = 0.8 # \u53ea\u6709colormap_auto_value\u4e3aTrue\u624d\u751f\u6548\uff0c\u8868\u793a\u5728\u81ea\u52a8\u53d6\u6700\u503c\u4e0a\u518d\u8fdb\u884c\u538b\u7f29\uff0c\u538b\u7f29\u6bd4\u4f8b\uff0c\u53d6\u503c\u8303\u56f4(0,1]\uff0c1\u8868\u793a\u4e0d\u538b\u7f29 d3_drawer . colormap_auto_mirror = True # \u8868\u793a\u53d6\u6700\u503c\u7edd\u5bf9\u503c\u6700\u5927\u7684\u503c\u4e3a\u6700\u5927\u503c\uff0c\u5176\u76f8\u53cd\u6570\u4e3a\u6700\u5c0f\u503c\uff0c\u65f6\u5f97\u5230\u7684\u8c03\u8272\u677f\u5173\u4e8e0\u5bf9\u79f0\uff0c\u6ce8\u610f\u5982\u679c\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u540c\u4e3a\u6b63\u6216\u540c\u4e3a\u8d1f\uff0c\u5219\u4e0d\u751f\u6548 \u8d8a\u754c\u503c\u663e\u793a \u00b6 d3_drawer . colormap_out_range_display = True # \u9ed8\u8ba4\u8bbe\u4e3aTrue\uff0c\u8d8a\u754c\u503c\u6309\u7167\u79bb\u5f97\u6700\u8fd1\u7684\u90a3\u4e2a\u6700\u503c\u53d6\uff1b\u4e3aFalse\uff0c\u8d8a\u754c\u503c\u4e0d\u663e\u793a \u900f\u660e\u5ea6 \u00b6 d3_drawer . colormap_alpha = None # \u8bbe\u7f6eNone\u5219\u4e0d\u900f\u660e d3_drawer . colormap_alpha = \"auto\" # \u9ed8\u8ba4\uff0cauto\u81ea\u52a8\u900f\u660e\uff0c\u5373\u7edd\u5bf9\u503c\u8d8a\u5c0f\u900f\u660e\u7a0b\u5ea6\u8d8a\u9ad8 d3_drawer . colormap_alpha = 0.8 # \u8bbe\u7f6e\u6574\u4f53\u900f\u660e\u5ea6\uff0c\u53d6\u503c\u8303\u56f4(0,1) \u8bbe\u7f6e\u5207\u9762\u8fb9\u754c\u548c\u4ea4\u7ebf \u00b6 \u8bbe\u7f6e\u5207\u9762\u8fb9\u754c \u00b6 d3_drawer . cut_line_edges = None #\u4e0d\u7ed8\u5236\u8fb9\u754c\u7ebf d3_drawer . cut_line_edges = dict ( color = '0.6' , linewidth = 0.6 , zorder = 1e3 ) # \u9ed8\u8ba4\uff0c\u8bbe\u7f6e\u8fb9\u754c\u7ebf\u6837\u5f0f \u8bbe\u7f6e\u5207\u9762\u4ea4\u7ebf \u00b6 d3_drawer . cut_line_cross = None # \u4e0d\u7ed8\u5236\u5207\u9762\u4ea4\u53c9\u7ebf d3_drawer . cut_line_cross = dict ( color = '0.4' , linewidth = 1 , zorder = 1e3 ) # \u9ed8\u8ba4\uff0c\u8bbe\u7f6e\u5207\u9762\u4ea4\u53c9\u7ebf\u6837\u5f0f \u52a0\u8f7d\u6570\u636e \u00b6 \u52a0\u8f7dhdf\u6570\u636e \u00b6 \u52a0\u8f7d\u6570\u636e data_hdf_path = r \"\\product1\\Bxyz.h5\" load_result = d3_drawer . load_data_hdf ( data_hdf_path ) \u5728\u4fdd\u5b58\u6216\u5c55\u793a\u5b8c\u56fe\u7247\u540e\uff0c\u9700\u8981\u5173\u95ed\u6587\u4ef6 d3_drawer . close_data_hdf () \u52a0\u8f7d\u56db\u7ef4\u6570\u7ec4\u6570\u636e \u00b6 \u52a0\u8f7d\u56db\u7ef4\u6570\u7ec4 array_data = np . random . uniform ( - 5 , 5 , size = ( 3 , 100 , 50 , 40 )) d3_drawer . load_data_array ( array_data ) \u6dfb\u52a0\u7ed8\u56fe\u5207\u9762 \u00b6 d3_drawer . add_cut ( B = \"Bx\" , N = \"Nx\" , cut_num = None , cut_percent = 0.5 ) B \u53ef\u9009\u503c\uff1a Bx , By , Bz \uff1b\u8868\u793a\u5c55\u793a\u4f55\u79cd\u5206\u91cf\uff0c\u9009 Bz \u5219\u5c55\u793a Bz \u5206\u91cf\uff0c\u6ce8\u610f\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u7ed8\u5236\u591a\u4e2a\u5207\u9762\uff0c\u6bcf\u4e2a\u5207\u9762\u4e5f\u53ef\u4ee5\u662f\u4e0d\u540c\u5206\u91cf N \u53ef\u9009\u503c\uff1a Nx , Ny , Nz \uff1b\u8868\u793a\u5207\u9762\u5782\u76f4\u4e8e\u54ea\u4e2a\u5750\u6807\u8f74\uff0c\u6ce8\u610f\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u7ed8\u5236\u591a\u4e2a\u5207\u9762\uff0c\u6bcf\u4e2a\u5207\u9762\u4e5f\u53ef\u4ee5\u662f\u53d6\u4e0d\u540c N \uff0c\u5373\u4e0d\u540c\u5207\u5272\u65b9\u5411 cut_num :\u53ef\u9009\u503c None \u6216 0-N* , \u5373\u8ddd\u79bb\u5750\u6807\u539f\u70b9\u591a\u8fdc\u5207\u5272\uff1b N* \u8868\u793a\uff0c\u5982\u679c\u4e0a\u9762 N \u53d6 Nx \uff0c\u5219 N* \u5fc5\u987b\u5728 [0,Nx) \u8303\u56f4\uff1b\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u5219\u4e3a None ,\u6839\u636e\u4e0b\u9762 cut_percent \u51b3\u5b9a\u5207\u5272\u4f4d\u7f6e\u3002 cut_percent \uff1a\u53ef\u9009\u503c (0,1) \u8303\u56f4\u5185\u7684\u6d6e\u70b9\u6570\uff0c\u8868\u793a\u8ddd\u79bb\u539f\u70b9\u591a\u8fdc\u7684\u6bd4\u4f8b\u8fdb\u884c\u5207\u5272\uff0c\u9ed8\u8ba40.5\uff0c\u5373\u4e2d\u95f4\u4f4d\u7f6e\uff0c\u82e5 cut_num \u8bbe\u7f6e\u4e3a\u4e0d\u4e3aNone\uff0c\u5219\u6b64\u9879\u5931\u6548\u3002 \u6267\u884c\u7ed8\u56fe\u64cd\u4f5c \u00b6 \u4f7f\u7528\u4e0b\u9762\u547d\u4ee4\u5f00\u59cb\u6267\u884c\u7ed8\u56fe\u64cd\u4f5c\uff0c\u5373\u5904\u7406\u6570\u636e\uff0c\u751f\u6210\u56fe\u7247\u5143\u7d20\u5bf9\u8c61\uff0c\u4f46\u662f\u5982\u679c\u4e0d\u5c55\u793a\u6216\u8005\u4fdd\u5b58\u4e0b\u6765\uff0c\u4ecd\u7136\u65e0\u6cd5\u53ef\u89c6\u5316\u3002 d3_drawer . run_cut () \u4fdd\u5b58\u6216\u5c55\u793a\u56fe\u7247 \u00b6 \u4fdd\u5b58\u56fe\u7247 \u00b6 picture_path = r \"\\product1\\NlfffPlotD3CutCake.png\" d3_drawer . savefig ( picture_path ) \u5176\u4e2d\u4f20\u5165\u53c2\u6570\u9700\u8981\u6ee1\u8db3 matplotlib.pyplot.savefig() \u65b9\u6cd5\u7684\u53c2\u6570\u8981\u6c42\u3002 if __name__ == \"__main__\" : print ( \"start test\" ) di = { \"figsize\" : ( 6 , 6 ) } # d3_drawer = NlfffPlotD3CutCake(**di) d3_drawer = NlfffPlotD3CutCake ( figsize = ( 6 , 6 )) data_hdf_path = r \"/home/zander/Desktop/Bxyz.h5\" picture_path = r \"/home/zander/Desktop/NlfffPlotD3CutCake.png\" load_result = d3_drawer . load_data_hdf ( data_hdf_path ) if load_result : # d3_drawer.colormap_mirror=True # d3_drawer.colormap_alpha=0.5 # d3_drawer.add_cut(\"Bz\", \"Nx\") # d3_drawer.add_cut(\"Bz\", \"Ny\") d3_drawer . add_cut ( \"Bz\" , \"Nz\" ) d3_drawer . add_cut ( \"Bz\" , \"Nz\" , cut_num = 0 ) # d3_drawer.add_cut(\"Bz\", \"Nx\",cut_percent=0.3) d3_drawer . add_cut ( \"Bz\" , \"Nz\" , cut_percent = 0.2 ) d3_drawer . run_cut () d3_drawer . savefig ( picture_path ) d3_drawer . show () d3_drawer . close_data_hdf () \u5c55\u793a\u56fe\u7247 \u00b6 d3_drawer . show () \u82e5\u9700\u8981\u4f20\u5165\u53c2\u6570\uff0c\u5176\u4e2d\u4f20\u5165\u53c2\u6570\u9700\u8981\u6ee1\u8db3 matplotlib.pyplot.show() \u65b9\u6cd5\u7684\u53c2\u6570\u8981\u6c42\u3002\u5373\u53ef\u4ee5\u5f39\u51fa\u7a97\u53e3\u8fdb\u884c\u4ea4\u4e92\u64cd\u4f5c\u3002\u6ce8\u610f\u82e5\u9700\u8981\u4fdd\u5b58\u56fe\u7247\uff0c\u9700\u8981\u5148\u4fdd\u5b58\u518d\u8c03\u7528\u6b64\u65b9\u6cd5\u5c55\u793a\uff0c\u5426\u5219\u53ef\u80fd\u5c55\u793a\u7a7a\u767d\u3002 \u5173\u95ed\u6570\u636e\u6587\u4ef6 \u00b6 \u82e5\u4f7f\u7528hdf\u6570\u636e\u6e90\uff0c\u5728\u4fdd\u5b58\u6216\u5c55\u793a\u5b8c\u56fe\u7247\u540e\uff0c\u9700\u8981\u5173\u95ed\u6587\u4ef6 d3_drawer . close_data_hdf ()","title":"\u5de5\u5177\u5305"},{"location":"toolkit/#_1","text":"","title":"\u4ea7\u54c1\u4f7f\u7528"},{"location":"toolkit/#nlffffile","text":"","title":"NlfffFile\u6587\u4ef6\u8bfb\u5199"},{"location":"toolkit/#_2","text":"from pynlfff.pyproduct import file r = file . NlfffFile ()","title":"\u521b\u5efa\u5bf9\u8c61"},{"location":"toolkit/#_3","text":"","title":"\u8bfb\u53d6\u6570\u636e"},{"location":"toolkit/#gridsize","text":"r = file . NlfffFile () grid_path = r \"\\product0\\grid3.ini\" s = r . get_size_from_grid ( grid_path ) print ( s ) [96, 228, 124]","title":"\u4ecegrid\u8bfb\u53d6size"},{"location":"toolkit/#bout","text":"\u65b9\u6cd5\u4e00\uff1a\u7ed9\u5b9a Bout.bin \u548c\u5bf9\u5e94\u7684 grid.ini \u6587\u4ef6 r = file . NlfffFile () bout_bin_path = r \"\\product0\\Bout.bin\" grid_path = r \"\\product0\\grid3.ini\" s = r . read_bin ( bout_bin_path , grid_path = grid_path ) print ( s . shape ) print ( s ) (3, 96, 228, 124) [[[[ -4.85755745 -3.69001267 -4.07361282 ... -0.26802718 -0.26802718 -0.26802718] [ -2.37227954 -3.32715352 -4.60636354 ... -0.26799428 -0.26799428 -0.26799428] [ 3.09420419 -2.96429436 -5.13911427 ... -0.26796139 -0.26796139 -0.26796139] ... ... [ 7.94384187 6.06213112 4.73552989 ... -0.45711367 -0.45711367 -0.45711367] [ 2.05455194 4.55914711 4.73552989 ... -0.45711367 -0.45711367 -0.45711367] [ 7.05974157 4.55914711 4.73552989 ... -0.45711367 -0.45711367 -0.45711367]]]] \u65b9\u6cd5\u4e8c\uff1a\u7ed9\u5b9a Bout.bin \u548c\u5bf9\u5e94\u7684 nx \u3001 ny \u3001 nz \u503c r = file . NlfffFile () bout_bin_path = r \"\\product0\\Bout.bin\" nx = 96 ny = 228 nz = 124 s = r . read_bin ( bout_bin_path , nx = nx , ny = ny , nz = nz ) print ( s . shape ) print ( s )","title":"\u8bfb\u53d6Bout\u6570\u636e"},{"location":"toolkit/#_4","text":"","title":"\u5199\u6570\u636e"},{"location":"toolkit/#hdf5","text":"\u65b9\u6cd5\u4e00\uff1a\u7ed9\u5b9a Bout.bin \u548c\u5bf9\u5e94\u7684 grid.ini \u6587\u4ef6\uff0c\u4ee5\u53ca hdf \u6587\u4ef6\u4fdd\u5b58\u8def\u5f84 r = file . NlfffFile () bout_bin_path = r \"\\product0\\Bout.bin\" grid_path = r \"\\product0\\grid3.ini\" h5_path = r \"\\product0\\Bxyz.h5\" r . tran_bin2hdf5 ( bout_bin_path , h5_path , grid_path = grid_path , overwrite = True ) \u65b9\u6cd5\u4e8c\uff1a\u7ed9\u5b9a Bout.bin \u548c\u5bf9\u5e94\u7684 nx \u3001 ny \u3001 nz \u503c\uff0c\u4ee5\u53ca hdf \u6587\u4ef6\u4fdd\u5b58\u8def\u5f84 r = file . NlfffFile () bout_bin_path = r \"\\product0\\Bout.bin\" h5_path = r \"\\product0\\Bxyz.h5\" nx = 96 ny = 228 nz = 124 r . tran_bin2hdf5 ( bout_bin_path , h5_path , nx = nx , ny = ny , nz = nz , overwrite = True )","title":"\u8f6c\u6362\u6587\u4ef6\u683c\u5f0f\u4e3ahdf5"},{"location":"toolkit/#_5","text":"r = file . NlfffFile () array_data = np . random . uniform ( - 5 , 5 , size = ( 3 , 100 , 50 , 40 )) h5_path = r \"\\product0\\Bxyz.h5\" r . write_hdf5 ( array_data , h5_path , overwrite = True )","title":"\u5199\u6570\u7ec4\u6570\u636e"},{"location":"toolkit/#_6","text":"","title":"\u4e09\u7ef4\u56fe\u50cf"},{"location":"toolkit/#nlfffplotd3cutcake","text":"","title":"\u5206\u91cf\u5207\u9762\u56feNlfffPlotD3CutCake"},{"location":"toolkit/#_7","text":"\u521b\u5efa\u7ed8\u56fe\u5bf9\u8c61\uff0c\u8bbe\u7f6e\u7ed8\u56fe\u5c5e\u6027\uff08\u53ef\u9009\uff09\uff0c\u52a0\u8f7d\u6570\u636e\uff0c\u6dfb\u52a0\u5207\u9762\uff0c\u6267\u884c\u7ed8\u5236\uff0c\u4fdd\u5b58\u6216\u5c55\u793a\u56fe\u7247\uff0c\u82e5\u52a0\u8f7d\u7684\u662fhdf\u6570\u636e\u6587\u4ef6\u8fd8\u9700\u8981\u5173\u95ed\u6587\u4ef6\u3002","title":"\u4f7f\u7528\u6d41\u7a0b"},{"location":"toolkit/#_8","text":"from pynlfff.pyplot import plot3d d3_drawer = plot3d . NlfffPlotD3CutCake () \u5176\u4e2d\u53ef\u4ee5\u521b\u5efa\u65f6\u4f20\u5165 matplotlib.pyplot.figure \u7684\u8bbe\u7f6e\u53c2\u6570\uff0c\u5982 from pynlfff.pyplot import plot3d d3_drawer = plot3d . NlfffPlotD3CutCake ( figsize = ( 6 , 6 )) \u6216\u8005\u5b57\u5178\u5f62\u5f0f\u4f20\u5165\u53c2\u6570 di_config = { \"figsize\" : ( 6 , 6 ) } d3_drawer = NlfffPlotD3CutCake ( ** di_config )","title":"\u521b\u5efa\u7ed8\u56fe\u5bf9\u8c61"},{"location":"toolkit/#_9","text":"","title":"\u8bbe\u7f6e\u7ed8\u56fe\u5bf9\u8c61\u5c5e\u6027\uff08\u53ef\u9009\uff09"},{"location":"toolkit/#_10","text":"","title":"\u8bbe\u7f6e\u8c03\u8272\u76d8"},{"location":"toolkit/#_11","text":"","title":"\u8272\u8c03\u8303\u56f4"},{"location":"toolkit/#_12","text":"d3_drawer . colormap_set_max = 40 # \u8bbe\u7f6e\u6700\u5927\u663e\u793a\u503c d3_drawer . colormap_set_max =- 30 # \u8bbe\u7f6e\u6700\u5c0f\u663e\u793a\u503c","title":"\u624b\u52a8\u8bbe\u7f6e\u8272\u8c03\u8303\u56f4"},{"location":"toolkit/#_13","text":"d3_drawer . colormap_auto_value = True # \u81ea\u52a8\u6c42\u7684\u7ed8\u56fe\u5207\u9762\u4e2d\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c d3_drawer . colormap_auto_zip = 0.8 # \u53ea\u6709colormap_auto_value\u4e3aTrue\u624d\u751f\u6548\uff0c\u8868\u793a\u5728\u81ea\u52a8\u53d6\u6700\u503c\u4e0a\u518d\u8fdb\u884c\u538b\u7f29\uff0c\u538b\u7f29\u6bd4\u4f8b\uff0c\u53d6\u503c\u8303\u56f4(0,1]\uff0c1\u8868\u793a\u4e0d\u538b\u7f29 d3_drawer . colormap_auto_mirror = True # \u8868\u793a\u53d6\u6700\u503c\u7edd\u5bf9\u503c\u6700\u5927\u7684\u503c\u4e3a\u6700\u5927\u503c\uff0c\u5176\u76f8\u53cd\u6570\u4e3a\u6700\u5c0f\u503c\uff0c\u65f6\u5f97\u5230\u7684\u8c03\u8272\u677f\u5173\u4e8e0\u5bf9\u79f0\uff0c\u6ce8\u610f\u5982\u679c\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u540c\u4e3a\u6b63\u6216\u540c\u4e3a\u8d1f\uff0c\u5219\u4e0d\u751f\u6548","title":"\u81ea\u52a8\u8bbe\u7f6e\u8272\u8c03\u8303\u56f4"},{"location":"toolkit/#_14","text":"d3_drawer . colormap_out_range_display = True # \u9ed8\u8ba4\u8bbe\u4e3aTrue\uff0c\u8d8a\u754c\u503c\u6309\u7167\u79bb\u5f97\u6700\u8fd1\u7684\u90a3\u4e2a\u6700\u503c\u53d6\uff1b\u4e3aFalse\uff0c\u8d8a\u754c\u503c\u4e0d\u663e\u793a","title":"\u8d8a\u754c\u503c\u663e\u793a"},{"location":"toolkit/#_15","text":"d3_drawer . colormap_alpha = None # \u8bbe\u7f6eNone\u5219\u4e0d\u900f\u660e d3_drawer . colormap_alpha = \"auto\" # \u9ed8\u8ba4\uff0cauto\u81ea\u52a8\u900f\u660e\uff0c\u5373\u7edd\u5bf9\u503c\u8d8a\u5c0f\u900f\u660e\u7a0b\u5ea6\u8d8a\u9ad8 d3_drawer . colormap_alpha = 0.8 # \u8bbe\u7f6e\u6574\u4f53\u900f\u660e\u5ea6\uff0c\u53d6\u503c\u8303\u56f4(0,1)","title":"\u900f\u660e\u5ea6"},{"location":"toolkit/#_16","text":"","title":"\u8bbe\u7f6e\u5207\u9762\u8fb9\u754c\u548c\u4ea4\u7ebf"},{"location":"toolkit/#_17","text":"d3_drawer . cut_line_edges = None #\u4e0d\u7ed8\u5236\u8fb9\u754c\u7ebf d3_drawer . cut_line_edges = dict ( color = '0.6' , linewidth = 0.6 , zorder = 1e3 ) # \u9ed8\u8ba4\uff0c\u8bbe\u7f6e\u8fb9\u754c\u7ebf\u6837\u5f0f","title":"\u8bbe\u7f6e\u5207\u9762\u8fb9\u754c"},{"location":"toolkit/#_18","text":"d3_drawer . cut_line_cross = None # \u4e0d\u7ed8\u5236\u5207\u9762\u4ea4\u53c9\u7ebf d3_drawer . cut_line_cross = dict ( color = '0.4' , linewidth = 1 , zorder = 1e3 ) # \u9ed8\u8ba4\uff0c\u8bbe\u7f6e\u5207\u9762\u4ea4\u53c9\u7ebf\u6837\u5f0f","title":"\u8bbe\u7f6e\u5207\u9762\u4ea4\u7ebf"},{"location":"toolkit/#_19","text":"","title":"\u52a0\u8f7d\u6570\u636e"},{"location":"toolkit/#hdf","text":"\u52a0\u8f7d\u6570\u636e data_hdf_path = r \"\\product1\\Bxyz.h5\" load_result = d3_drawer . load_data_hdf ( data_hdf_path ) \u5728\u4fdd\u5b58\u6216\u5c55\u793a\u5b8c\u56fe\u7247\u540e\uff0c\u9700\u8981\u5173\u95ed\u6587\u4ef6 d3_drawer . close_data_hdf ()","title":"\u52a0\u8f7dhdf\u6570\u636e"},{"location":"toolkit/#_20","text":"\u52a0\u8f7d\u56db\u7ef4\u6570\u7ec4 array_data = np . random . uniform ( - 5 , 5 , size = ( 3 , 100 , 50 , 40 )) d3_drawer . load_data_array ( array_data )","title":"\u52a0\u8f7d\u56db\u7ef4\u6570\u7ec4\u6570\u636e"},{"location":"toolkit/#_21","text":"d3_drawer . add_cut ( B = \"Bx\" , N = \"Nx\" , cut_num = None , cut_percent = 0.5 ) B \u53ef\u9009\u503c\uff1a Bx , By , Bz \uff1b\u8868\u793a\u5c55\u793a\u4f55\u79cd\u5206\u91cf\uff0c\u9009 Bz \u5219\u5c55\u793a Bz \u5206\u91cf\uff0c\u6ce8\u610f\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u7ed8\u5236\u591a\u4e2a\u5207\u9762\uff0c\u6bcf\u4e2a\u5207\u9762\u4e5f\u53ef\u4ee5\u662f\u4e0d\u540c\u5206\u91cf N \u53ef\u9009\u503c\uff1a Nx , Ny , Nz \uff1b\u8868\u793a\u5207\u9762\u5782\u76f4\u4e8e\u54ea\u4e2a\u5750\u6807\u8f74\uff0c\u6ce8\u610f\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u7ed8\u5236\u591a\u4e2a\u5207\u9762\uff0c\u6bcf\u4e2a\u5207\u9762\u4e5f\u53ef\u4ee5\u662f\u53d6\u4e0d\u540c N \uff0c\u5373\u4e0d\u540c\u5207\u5272\u65b9\u5411 cut_num :\u53ef\u9009\u503c None \u6216 0-N* , \u5373\u8ddd\u79bb\u5750\u6807\u539f\u70b9\u591a\u8fdc\u5207\u5272\uff1b N* \u8868\u793a\uff0c\u5982\u679c\u4e0a\u9762 N \u53d6 Nx \uff0c\u5219 N* \u5fc5\u987b\u5728 [0,Nx) \u8303\u56f4\uff1b\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u5219\u4e3a None ,\u6839\u636e\u4e0b\u9762 cut_percent \u51b3\u5b9a\u5207\u5272\u4f4d\u7f6e\u3002 cut_percent \uff1a\u53ef\u9009\u503c (0,1) \u8303\u56f4\u5185\u7684\u6d6e\u70b9\u6570\uff0c\u8868\u793a\u8ddd\u79bb\u539f\u70b9\u591a\u8fdc\u7684\u6bd4\u4f8b\u8fdb\u884c\u5207\u5272\uff0c\u9ed8\u8ba40.5\uff0c\u5373\u4e2d\u95f4\u4f4d\u7f6e\uff0c\u82e5 cut_num \u8bbe\u7f6e\u4e3a\u4e0d\u4e3aNone\uff0c\u5219\u6b64\u9879\u5931\u6548\u3002","title":"\u6dfb\u52a0\u7ed8\u56fe\u5207\u9762"},{"location":"toolkit/#_22","text":"\u4f7f\u7528\u4e0b\u9762\u547d\u4ee4\u5f00\u59cb\u6267\u884c\u7ed8\u56fe\u64cd\u4f5c\uff0c\u5373\u5904\u7406\u6570\u636e\uff0c\u751f\u6210\u56fe\u7247\u5143\u7d20\u5bf9\u8c61\uff0c\u4f46\u662f\u5982\u679c\u4e0d\u5c55\u793a\u6216\u8005\u4fdd\u5b58\u4e0b\u6765\uff0c\u4ecd\u7136\u65e0\u6cd5\u53ef\u89c6\u5316\u3002 d3_drawer . run_cut ()","title":"\u6267\u884c\u7ed8\u56fe\u64cd\u4f5c"},{"location":"toolkit/#_23","text":"","title":"\u4fdd\u5b58\u6216\u5c55\u793a\u56fe\u7247"},{"location":"toolkit/#_24","text":"picture_path = r \"\\product1\\NlfffPlotD3CutCake.png\" d3_drawer . savefig ( picture_path ) \u5176\u4e2d\u4f20\u5165\u53c2\u6570\u9700\u8981\u6ee1\u8db3 matplotlib.pyplot.savefig() \u65b9\u6cd5\u7684\u53c2\u6570\u8981\u6c42\u3002 if __name__ == \"__main__\" : print ( \"start test\" ) di = { \"figsize\" : ( 6 , 6 ) } # d3_drawer = NlfffPlotD3CutCake(**di) d3_drawer = NlfffPlotD3CutCake ( figsize = ( 6 , 6 )) data_hdf_path = r \"/home/zander/Desktop/Bxyz.h5\" picture_path = r \"/home/zander/Desktop/NlfffPlotD3CutCake.png\" load_result = d3_drawer . load_data_hdf ( data_hdf_path ) if load_result : # d3_drawer.colormap_mirror=True # d3_drawer.colormap_alpha=0.5 # d3_drawer.add_cut(\"Bz\", \"Nx\") # d3_drawer.add_cut(\"Bz\", \"Ny\") d3_drawer . add_cut ( \"Bz\" , \"Nz\" ) d3_drawer . add_cut ( \"Bz\" , \"Nz\" , cut_num = 0 ) # d3_drawer.add_cut(\"Bz\", \"Nx\",cut_percent=0.3) d3_drawer . add_cut ( \"Bz\" , \"Nz\" , cut_percent = 0.2 ) d3_drawer . run_cut () d3_drawer . savefig ( picture_path ) d3_drawer . show () d3_drawer . close_data_hdf ()","title":"\u4fdd\u5b58\u56fe\u7247"},{"location":"toolkit/#_25","text":"d3_drawer . show () \u82e5\u9700\u8981\u4f20\u5165\u53c2\u6570\uff0c\u5176\u4e2d\u4f20\u5165\u53c2\u6570\u9700\u8981\u6ee1\u8db3 matplotlib.pyplot.show() \u65b9\u6cd5\u7684\u53c2\u6570\u8981\u6c42\u3002\u5373\u53ef\u4ee5\u5f39\u51fa\u7a97\u53e3\u8fdb\u884c\u4ea4\u4e92\u64cd\u4f5c\u3002\u6ce8\u610f\u82e5\u9700\u8981\u4fdd\u5b58\u56fe\u7247\uff0c\u9700\u8981\u5148\u4fdd\u5b58\u518d\u8c03\u7528\u6b64\u65b9\u6cd5\u5c55\u793a\uff0c\u5426\u5219\u53ef\u80fd\u5c55\u793a\u7a7a\u767d\u3002","title":"\u5c55\u793a\u56fe\u7247"},{"location":"toolkit/#_26","text":"\u82e5\u4f7f\u7528hdf\u6570\u636e\u6e90\uff0c\u5728\u4fdd\u5b58\u6216\u5c55\u793a\u5b8c\u56fe\u7247\u540e\uff0c\u9700\u8981\u5173\u95ed\u6587\u4ef6 d3_drawer . close_data_hdf ()","title":"\u5173\u95ed\u6570\u636e\u6587\u4ef6"}]}