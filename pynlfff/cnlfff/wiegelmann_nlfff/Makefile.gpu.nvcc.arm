
# gpu cuda parallel   开发环境
# LDFLAGS = -lm
# CFLAGS =  -g -O0 #-Wunused-parameter
# NVCCFLAGS = -lib -g -O0 --fmad=false
# CC = nvcc
# NVCC = nvcc


#  运行环境  a100 
LDFLAGS = -lm
CFLAGS = -O3 #-Wunused-parameter
NVCCFLAGS = -lib -O3 -arch=sm_80 # 假设GPU架构为sm_80，根据实际情况修改
CC = nvcc
NVCC = nvcc

#  运行环境  通用
# LDFLAGS = -lm
# CFLAGS = -O3 #-Wunused-parameter
# NVCCFLAGS = -lib -O3 # -arch=sm_80 # 假设GPU架构为sm_80，根据实际情况修改
# CC = nvcc
# NVCC = nvcc


# ============
RUNDIR = compiled.gpu.nvcc.arm
MAKEFILE=Makefile.gpu.nvcc.arm
################################

LD = $(CC)
TOOLS = rebin prepro checkquality checkenergy saveboundary fftpot4

all: relax4 $(TOOLS)

RELAX4_SRC = relax1_gpu.cpp
RELAX4_OBJ = $(RELAX4_SRC:.cpp=.o)

relax4:	optim_gpu $(RELAX4_OBJ)
	$(LD) -o $@ $(RELAX4_OBJ) optim_gpu.o $(LDFLAGS)

$(RELAX4_OBJ):	 $(MAKEFILE)

optim_gpu:
	$(NVCC) $(NVCCFLAGS) optim_gpu.cu -o optim_gpu.o

## tools
rebin:		rebin3d.o $(MAKEFILE)
	$(LD) -o $@ rebin3d.o $(LDFLAGS)

prepro:		prepro.o $(MAKEFILE)
	$(LD) -o $@ prepro.o $(LDFLAGS)

checkquality:	checkquality.o $(MAKEFILE)
	$(LD) -o $@ checkquality.o $(LDFLAGS)

saveboundary:	saveboundary.o $(MAKEFILE)
	$(LD) -o $@ saveboundary.o $(LDFLAGS)

fftpot4:	fftpot4.o $(MAKEFILE)
	$(LD) -o $@ fftpot4.o $(LDFLAGS)

checkenergy:	checkenergy.o $(MAKEFILE)
	$(LD) -o $@ checkenergy.o $(LDFLAGS)


%.o: %.cpp
	$(CC) -c $(CFLAGS) $< -o $@

.PHONY: clean 
clean:
	rm -f relax4
	rm -f rebin3d.o
	rm -rf *.o
	rm -f $(RELAX4_OBJ) 
	rm -f $(TOOLS) $(TOOLS:=.o)


install: relax4 $(TOOLS)
	test -d $(RUNDIR) || mkdir $(RUNDIR)
	cp relax4 $(RUNDIR)
	cp $(TOOLS) $(RUNDIR)
	cp multigrid.nvcc.arm.sh $(RUNDIR)/multigrid.sh
	cp multigrid.nvcc.arm.sim.sh $(RUNDIR)/multigrid.sim.sh
	chmod +x $(RUNDIR)/*


